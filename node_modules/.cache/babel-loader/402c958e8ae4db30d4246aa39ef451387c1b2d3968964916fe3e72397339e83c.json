{"ast":null,"code":"import axios from 'axios';\nexport function loginUser(username) {\n  return new Promise((resolve, reject) => {\n    // Replace this with your actual login logic\n    // For example, you can make an API call to your back-end for authentication\n    // and resolve the promise based on the response\n\n    axios.post('/login', {\n      username\n    }).then(response => {\n      const {\n        data\n      } = response; // Extract the response data\n\n      // Assuming the backend responds with a success message\n      if (data === 'Login successful!') {\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"names":["axios","loginUser","username","Promise","resolve","reject","post","then","response","data","catch","error"],"sources":["/Users/ya6115131/digital-ocean-tutorial/src/loginService.js"],"sourcesContent":["import axios from 'axios';\n\nexport function loginUser(username) {\n  return new Promise((resolve, reject) => {\n    // Replace this with your actual login logic\n    // For example, you can make an API call to your back-end for authentication\n    // and resolve the promise based on the response\n\n    axios\n      .post('/login', { username })\n      .then((response) => {\n        const { data } = response; // Extract the response data\n\n        // Assuming the backend responds with a success message\n        if (data === 'Login successful!') {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,SAASA,CAACC,QAAQ,EAAE;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA;IACA;;IAEAL,KAAK,CACFM,IAAI,CAAC,QAAQ,EAAE;MAAEJ;IAAS,CAAC,CAAC,CAC5BK,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAAEC;MAAK,CAAC,GAAGD,QAAQ,CAAC,CAAC;;MAE3B;MACA,IAAIC,IAAI,KAAK,mBAAmB,EAAE;QAChCL,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,MAAM;QACLA,OAAO,CAAC,KAAK,CAAC;MAChB;IACF,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChBN,MAAM,CAACM,KAAK,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}